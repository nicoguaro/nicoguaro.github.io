<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nicolás' blog (Posts about inkscape)</title><link>https://nicoguaro.github.io/</link><description></description><atom:link href="https://nicoguaro.github.io/categories/inkscape.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2025 &lt;a href="mailto:nicoguarin@gmail.com"&gt;Nicolás Guarín-Zapata&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License"
style="border-width:0"
src="https://i.creativecommons.org/l/by/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Tue, 15 Apr 2025 20:33:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Technical writing: Using Figures</title><link>https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;p&gt;In a &lt;a class="reference external" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing"&gt;previous post&lt;/a&gt; I mentioned some general aspects of
technical writing. In this one, I would like to talk about including
figures in technical documents.&lt;/p&gt;
&lt;p&gt;This post is about some details on the planning of figures for technical
documents. The main document in mind is a technical article (research paper,
techincal report). Although, it also applies to presentations or posters.&lt;/p&gt;
&lt;section id="graphic-formats"&gt;
&lt;h2&gt;Graphic formats&lt;/h2&gt;
&lt;p&gt;First, I should mention that there are two main types of graphics, namely:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;vector graphics; and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;raster graphics.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They serve different purposes and we should use them accordingly. For example,
for diagrams or schematics is better to use vector formats, in general. On
the other hand, raster formats are better suited for images such as photographs
or illustrations.&lt;/p&gt;
&lt;section id="vector-graphics"&gt;
&lt;h3&gt;Vector graphics&lt;/h3&gt;
&lt;p&gt;A &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Vector_graphics"&gt;vector image&lt;/a&gt;
is an image that is made up of geometric entities. In this case, the
stored information is not point-to-point but &lt;em&gt;the construction&lt;/em&gt; of
the shapes that constitute it. For this reason, these images don't
&lt;em&gt;pixelate&lt;/em&gt; because the information you have is how to build it.
This type of images is the best options for schematics and diagrams,
since the only stored information are the strokes and text added to
them. The &lt;em&gt;de facto&lt;/em&gt; standard for this type of images is PDF —it is the one
I usually include in my documents \(\LaTeX\). Although PDF is the
&lt;em&gt;standard&lt;/em&gt;, the preferred format is &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics"&gt;SVG (Scalable Vector
Graphics)&lt;/a&gt;
which is a standard across the internet and most &lt;em&gt;modern&lt;/em&gt; browsers
let you render them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="raster-graphics"&gt;
&lt;h3&gt;Raster graphics&lt;/h3&gt;
&lt;p&gt;A &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Raster_graphics"&gt;raster image&lt;/a&gt; is an image
which is represented by an array (or rectangular grid) of pixels. In other
words, the color information that there are in each point of the image. The
most popular formats store the compressed information. For high contrast
graphics (such as schematics or diagrams) the best format is PNG. If you have
an animation, GIF would be preferable. And in the case of photographs it is
better to use JPG.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="summary-for-formats"&gt;
&lt;h3&gt;Summary for formats&lt;/h3&gt;
&lt;p&gt;Summarizing, we should use JPG images (only) for photographs and SVG for
schematics/diagrams. Another attribute that may be useful is the management
of layers. Having several layers gives you the option of stacking different
types of information separately. For example, you can have the background,
the image, and the annotations in different layers. This way you can modify
only the part of the figure that concerns you. You can automate the translation
of the annotations this way without much problem. Formats such as SVG let you
have several layers. In the case of raster formats, we have the
option to use TIFF.&lt;/p&gt;
&lt;p&gt;Regarding software to generate/edit this type of images I must say that there
are a large number of programs that allow exporting to these formats:
Python/Matplotlib, Matlab, Inkscape, Adobe Illustrator, GIMP, Photoshop,
LibreOffice. If the graph is generated from a calculation or a data series I
use Matplotlib. If, instead, we want to make a schematic my tool of choice
is &lt;a class="reference external" href="http://www.inkscape.org/"&gt;Inkscape&lt;/a&gt;. This program is intended to be a
free alternative to programs like Adobe Illustrator —and it does achieve it.
Obviously, you could use Illustrator or Corel Draw for this task. If the only
use would be to make technical schematics, I think it would be a waste.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="designing-figures-for-documents"&gt;
&lt;h2&gt;Designing figures for documents&lt;/h2&gt;
&lt;p&gt;I suggest starting from the nominal size of the figure in the document. For
most of our documents, the figures will remain digital and this
might seem counterintuitive. Nevertheless, I find this approach much easier.
One of the reasons is that we still embed our figure in a document with a
nominal size. Also, when thinking about font size it is common that we have as
reference printed text. On top of that, we should consider that the human eye
has a resolution limit, so we can't just scale down our figures.&lt;/p&gt;
&lt;p&gt;Also, there is no such thing as resolution of a digital image. Resolution
refers to a density of pixels per unit length. This makes sense when printing
images, but not in the digital case. Nevertheless, the figures have a nominal
size and hence a nominal resolution. That is, the number of pixels in one
direction divided by its nominal size. It is a good idea to consider a
minimal resolution of 150 dpi (dots per inch). For example, an image of
6 in × 3 in. This image would have a size of (at 150 dpi) of de 900 px × 450 px.&lt;/p&gt;
&lt;p&gt;The following Python snippet creates a figure of size 6 in × 3 in, and plots
the function \(f(x) = \sin(x^2)\) and stores it as an image of size
900 in × 450 in.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code python"&gt;&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-1" name="rest_code_a38eb03978594f1baee4a5dc027cde81-1" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;numpy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;np&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-2" name="rest_code_a38eb03978594f1baee4a5dc027cde81-2" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-3" name="rest_code_a38eb03978594f1baee4a5dc027cde81-3" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-4" name="rest_code_a38eb03978594f1baee4a5dc027cde81-4" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-5" name="rest_code_a38eb03978594f1baee4a5dc027cde81-5" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-6" name="rest_code_a38eb03978594f1baee4a5dc027cde81-6" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-6"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-7" name="rest_code_a38eb03978594f1baee4a5dc027cde81-7" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-7"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-8" name="rest_code_a38eb03978594f1baee4a5dc027cde81-8" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-8"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"y"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a38eb03978594f1baee4a5dc027cde81-9" name="rest_code_a38eb03978594f1baee4a5dc027cde81-9" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_a38eb03978594f1baee4a5dc027cde81-9"&gt;&lt;/a&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;savefig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"fig_ex_python.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dpi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the following in Matlab.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code matlab"&gt;&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-1" name="rest_code_4e3b00012e4443e3b864a994308d04b5-1" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-2" name="rest_code_4e3b00012e4443e3b864a994308d04b5-2" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Units&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'inches'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-3" name="rest_code_4e3b00012e4443e3b864a994308d04b5-3" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-4" name="rest_code_4e3b00012e4443e3b864a994308d04b5-4" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-4"&gt;&lt;/a&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-5" name="rest_code_4e3b00012e4443e3b864a994308d04b5-5" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-5"&gt;&lt;/a&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-6" name="rest_code_4e3b00012e4443e3b864a994308d04b5-6" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-6"&gt;&lt;/a&gt;&lt;span class="nb"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'LineWidth'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-7" name="rest_code_4e3b00012e4443e3b864a994308d04b5-7" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-7"&gt;&lt;/a&gt;&lt;span class="nb"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'x'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'FontSize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-8" name="rest_code_4e3b00012e4443e3b864a994308d04b5-8" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-8"&gt;&lt;/a&gt;&lt;span class="nb"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'FontSize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-9" name="rest_code_4e3b00012e4443e3b864a994308d04b5-9" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-9"&gt;&lt;/a&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'PaperSize'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;a id="rest_code_4e3b00012e4443e3b864a994308d04b5-10" name="rest_code_4e3b00012e4443e3b864a994308d04b5-10" href="https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/#rest_code_4e3b00012e4443e3b864a994308d04b5-10"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'fig_ex_matlab'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'-dpng'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;'-r150'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Following I summarize some sizes for articles, posters and slides.&lt;/p&gt;
&lt;section id="articles"&gt;
&lt;h3&gt;Articles&lt;/h3&gt;
&lt;p&gt;For an article is common to use letter size that is 8.5 in × 11 in
(215.9 mm × 279.4 mm). Another common size is A4 that is 210 mm × 297 mm
(8.27 in × 11.7 in).&lt;/p&gt;
&lt;p&gt;A guideline for common sizes is the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;1.0 columns width: 90 mm (3.5 in);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.5 columns width: 140 mm (5.5 in);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.0 columns width: 190 mm (6.5 in);&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and depicted in the following image.&lt;/p&gt;
&lt;img alt="Figure widths compared with letter size paper." class="align-center" src="https://nicoguaro.github.io/images/tech_writing/sizes.png" style="width: 400px;"&gt;
&lt;p&gt;If we consider a &lt;em&gt;resolution&lt;/em&gt; of 300 dpi, we have the following number
of pixels horizontally&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;1.0 columns width: 1050 pixels;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.5 columns width: 1650 pixels; and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.0 columns width: 1950 pixels.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that an HD display has 1920 pixels in the horizontal direction. That means
that you need a HD display to be able to see that much pixels.&lt;/p&gt;
&lt;p&gt;Regarding text size, it is common to have sizes between 8 and 12 pts for figures.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="posters"&gt;
&lt;h3&gt;Posters&lt;/h3&gt;
&lt;p&gt;In the case of an A0 size paper (841 mm × 1189 mm, 33 in × 47 in) the sizes
would be around:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;1.0 columns width: 360 mm (14 in);&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1.5 columns width: 560 mm (22 in); and&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2.0 columns width: 760 mm (26 in).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that a poster might not fit into the two-column format. Although,
I still find the reference for the size useful.&lt;/p&gt;
&lt;p&gt;Regarding the size of fonts in posters it is a good idea to keep it over
24 pts (see reference 3).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="slides"&gt;
&lt;h3&gt;Slides&lt;/h3&gt;
&lt;p&gt;In the case of slides there are two common aspect ratios 16:9 and 4:3.
And, different software have different nominal sizes. The following
table present the nominal sizes for LibreOffice Impress and MS
Power Point.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;16:9&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;4:3&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;LibreOffice Impress&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.02 in × 6.20 in&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;11.02 in × 8.00 in&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;MS Power Point&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;13.32 in × 7.50 in&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;10.00 in × 7.50 in&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/section&gt;
&lt;section id="references"&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Matthew Butterick (2019). &lt;a class="reference external" href="https://practicaltypography.com/"&gt;Butterick's Practical Typography&lt;/a&gt;.
Second edition, Matthew Butterick.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rougier, Nicolas P., Michael Droettboom, and Philip E. Bourne (2014).
“Ten Simple Rules for Better Figures.” PLOS Computational Biology 10(9):e1003833.
DOI: 10.1371/journal.pcbi.1003833.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Erren, Thomas C., and Philip E. Bourne. 2007.
“Ten Simple Rules for a Good Poster Presentation.”
PLOS Computational Biology 3(5):e102. DOI: 10.1371/journal.pcbi.0030102&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elsevier. (n.d.). "Artwork Overview." Retrieved November 1, 2021,
from &lt;a class="reference external" href="https://www.elsevier.com/authors/policies-and-guidelines/artwork-and-media-instructions/artwork-overview"&gt;https://www.elsevier.com/authors/policies-and-guidelines/artwork-and-media-instructions/artwork-overview&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elsevier. (n.d.). "Artwork sizing." Retrieved November 1, 2021,
from &lt;a class="reference external" href="https://www.elsevier.com/authors/policies-and-guidelines/artwork-and-media-instructions/artwork-sizing"&gt;https://www.elsevier.com/authors/policies-and-guidelines/artwork-and-media-instructions/artwork-sizing&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Journal of applied physics (n.d.). "Preparing Your Manuscript: Authors
Instruction." Retrieved November 1, 2021, from &lt;a class="reference external" href="https://aip.scitation.org/jap/authors/manuscript"&gt;https://aip.scitation.org/jap/authors/manuscript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>figures</category><category>inkscape</category><category>latex</category><category>libreoffice</category><category>research</category><category>typography</category><category>writing</category><guid>https://nicoguaro.github.io/posts/tech_writing/tech_writing_figs/</guid><pubDate>Wed, 03 Nov 2021 17:53:40 GMT</pubDate></item><item><title>Isometric graphics in Inkscape: Part 2</title><link>https://nicoguaro.github.io/posts/isometric_inkscape2/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;p&gt;&lt;a class="reference external" href="https://nicoguaro.github.io/posts/isometric_inkscape"&gt;Last week&lt;/a&gt;  I posted a quick guide on isometric
drawing using &lt;a class="reference external" href="https://inkscape.org/en/"&gt;Inkscape&lt;/a&gt;. In that post, I
showed how to obtain images that are projected to the faces of an
isometric box.&lt;/p&gt;
&lt;p&gt;After my post, I was asked by &lt;a class="reference external" href="https://twitter.com/parresianz"&gt;Biswajit Banerjee&lt;/a&gt;
on &lt;a class="reference external" href="https://twitter.com/parresianz/status/999787980658126848"&gt;Twitter&lt;/a&gt; if
I could repeat the process with a more complex example, and he suggested
the following schematic&lt;/p&gt;
&lt;img alt="Computing the moment of force in a beam" class="align-center" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/Beam_moment_plain.svg/512px-Beam_moment_plain.svg.png"&gt;
&lt;p&gt;which, I guess, was created in Inkscape using the "Create 3D Box" option.&lt;/p&gt;
&lt;p&gt;In this post, I will:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Use the same approach from last week to recreate this schematic&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Suggest my preferred approach for drawing this schematic&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;section id="first-approach"&gt;
&lt;h2&gt;First approach&lt;/h2&gt;
&lt;p&gt;I will repeat the cheatsheet from last week. Keep in mind that Inkscape
treats clockwise rotation as positive. Opposite to common notation in
mathematics.&lt;/p&gt;
&lt;img alt="Cheatsheet for isometric schematics in Inkscape" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/isometric_instructions.svg" style="width: 500px;"&gt;
&lt;p&gt;Then, to create a box with desired dimensions we first create each rectangle
with the right dimensiones (in parallel projections). In the following
example we used faces with aspect ratios 3:2, 2:1 and 4:3. The box at the right
is the figure obtained after applying the transformations described in
the previous schematic.&lt;/p&gt;
&lt;img alt="Orthogonal views and final isometric figure" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/isometric_ex2.svg" style="width: 500px;"&gt;
&lt;p&gt;We can now proceed, to recreate the desired figure. I don't know the
exact dimensions of the box; my guess is that the cross-section was
a square and the aspect ratio was 5:1. After applying the transformations
to each rectangle we obtain the following (adding some tweaks here and there).&lt;/p&gt;
&lt;img alt="Recreated figure using the described approach" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/isometric_beam.svg" style="width: 500px;"&gt;
&lt;/section&gt;
&lt;section id="second-approach"&gt;
&lt;h2&gt;Second approach&lt;/h2&gt;
&lt;p&gt;For this type of schematic, I would prefer to create an axonometric grid
(&lt;code class="docutils literal"&gt;File &amp;gt; Document Properties &amp;gt; Grids&lt;/code&gt;). After adding the grid to our
canvas it is pretty straightforward to draw the figures in isometric
view. The canvas should look similar to the following image.&lt;/p&gt;
&lt;img alt="Second approach: using an axonometric grid" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/screenshot_inkscape.png" style="width: 500px;"&gt;
&lt;p&gt;We can then draw each face using the grid. If we want to be more precise
we can activate &lt;code class="docutils literal"&gt;Snap to Cusp Nodes&lt;/code&gt;. The following animation shows
the step by step construction.&lt;/p&gt;
&lt;img alt="Step by step construction of the isometric" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/isometric_construction.gif" style="width: 500px;"&gt;
&lt;p&gt;And we obtain the final image.&lt;/p&gt;
&lt;img alt="Recreated figure using the second approach" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/isometric_beam2.svg" style="width: 500px;"&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As I mentioned, Inkscape can be used for drawing simple figures in isometric
projection. Nevertheless, I strongly suggest to use a CAD like
&lt;a class="reference external" href="https://freecadweb.org/"&gt;FreeCAD&lt;/a&gt; for more complicated geometries.&lt;/p&gt;
&lt;/section&gt;</description><category>computer graphics</category><category>inkscape</category><category>tutorial</category><guid>https://nicoguaro.github.io/posts/isometric_inkscape2/</guid><pubDate>Wed, 30 May 2018 17:40:57 GMT</pubDate></item><item><title>Isometric graphics in Inkscape</title><link>https://nicoguaro.github.io/posts/isometric_inkscape/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;p&gt;Sometimes I find myself in need of making a schematic using an
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Isometric_projection"&gt;isometric projection&lt;/a&gt;.
When the schematic is complicated the best shot is to use some
CAD like &lt;a class="reference external" href="https://freecadweb.org/"&gt;FreeCAD&lt;/a&gt;, but sometimes it's just
needed in simple diagrams. Another situation where this is a common needed
is in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Isometric_graphics_in_video_games_and_pixel_art"&gt;video games&lt;/a&gt;,
where &lt;a class="reference external" href="https://youtu.be/toWMFcWB4HA"&gt;"isometric art"&lt;/a&gt; and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pixel_art"&gt;pixel art&lt;/a&gt; are pretty common.&lt;/p&gt;
&lt;p&gt;What we want is depicted in the following figure.&lt;/p&gt;
&lt;img alt="Views names in third angle representation" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/isometric_example.svg" style="width: 400px;"&gt;
&lt;p&gt;That is, we want to start with some information that is drawn, or
written in the case of the example, and we want to obtain how would it
been seen on one of the faces of an isometric box.&lt;/p&gt;
&lt;p&gt;Following, I will describe briefly the transformations involved in this process.
If you are just interested in the recipe for doing this in Inkscape, skip to
the end of this post.&lt;/p&gt;
&lt;section id="transformations-involved"&gt;
&lt;h2&gt;Transformations involved&lt;/h2&gt;
&lt;p&gt;Since we are working on a computer screen, we are talking of 2 dimensions.
Hence, all transformations are represented by 2×2 matrices. In the particular
example of interest in this post we need the following transformations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Vertical scaling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Horizontal skew&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rotation&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following are the transformation matrices.&lt;/p&gt;
&lt;section id="scaling-in-the-vertical-direction"&gt;
&lt;h3&gt;Scaling in the vertical direction&lt;/h3&gt;
&lt;p&gt;The matrix is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
M_\text{scaling} = \begin{bmatrix} 1 &amp;amp;0\\ 0 &amp;amp;a\end{bmatrix}\, ,
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(a\)&lt;/span&gt; is the scaling factor.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="horizontal-skew"&gt;
&lt;h3&gt;Horizontal skew&lt;/h3&gt;
&lt;p&gt;The matrix is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
M_\text{skew} = \begin{bmatrix} 1 &amp;amp;\tan a\\ 0 &amp;amp;1\end{bmatrix}\, ,
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(a\)&lt;/span&gt; is the skewing angle.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="rotation"&gt;
&lt;h3&gt;Rotation&lt;/h3&gt;
&lt;p&gt;The matrix is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
M_\text{rotation} = \begin{bmatrix} \cos a &amp;amp;-\sin a\\ \sin a &amp;amp;\cos a\end{bmatrix}\, ,
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(a\)&lt;/span&gt; is the rotation angle.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="complete-transformation"&gt;
&lt;h3&gt;Complete transformation&lt;/h3&gt;
&lt;p&gt;The complete transformation is given by&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
M_\text{complete} = M_\text{rotation} M_\text{skew} M_\text{scaling}\, ,
\end{equation*}
&lt;/div&gt;
&lt;p&gt;particularly,&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
&amp;amp;M_\text{side} =
  \frac{1}{2}\begin{bmatrix} \sqrt{3} &amp;amp; 0\\ -1 &amp;amp;2\end{bmatrix}\approx
  \begin{bmatrix} 0.866 &amp;amp; 0.000\\ -0.500 &amp;amp;1.000\end{bmatrix}\, , \\
&amp;amp;M_\text{front} = \frac{1}{2}\begin{bmatrix} \sqrt{3} &amp;amp; 0\\ 1 &amp;amp;2\end{bmatrix}\approx
  \begin{bmatrix} 0.866 &amp;amp; 0.000\\ 0.500 &amp;amp;1.000\end{bmatrix}\, , \\
&amp;amp;M_\text{plant} = \frac{1}{2}\begin{bmatrix} \sqrt{3} &amp;amp; -\sqrt{3}\\ -1 &amp;amp;1\end{bmatrix}\approx
  \begin{bmatrix} 0.866 &amp;amp; -0.866\\ 0.500 &amp;amp;0.500\end{bmatrix}\, .
\end{align*}
&lt;/div&gt;
&lt;p&gt;The values seem a bit arbitrary, but they can be obtained from the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Isometric_projection#Mathematics"&gt;isometric projection&lt;/a&gt;
itself. But that explanation would be a bit too long for this post.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tranformation-in-inkscape"&gt;
&lt;h3&gt;Tranformation in Inkscape&lt;/h3&gt;
&lt;p&gt;We already have the transformation matrices and we can use them in Inkscape.
But first, we need to understand how it works. Inkscape uses
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics"&gt;SVG&lt;/a&gt;, the web
standard for vector graphics. &lt;a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform"&gt;Transformations&lt;/a&gt; in SVG are done using the following
matrix&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\begin{bmatrix} a &amp;amp;c &amp;amp;e\\ b &amp;amp;d &amp;amp;f\\ 0 &amp;amp;0 &amp;amp;1\end{bmatrix}\, ,
\end{equation*}
&lt;/div&gt;
&lt;p&gt;that uses &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Homogeneous_coordinates"&gt;homogeneous coordinates&lt;/a&gt;. So, one can just press &lt;code class="docutils literal"&gt;Shift + Ctrl + M&lt;/code&gt;
and type the components of the matrices obtained above for
&lt;span class="math"&gt;\(a\)&lt;/span&gt;, &lt;span class="math"&gt;\(b\)&lt;/span&gt;, &lt;span class="math"&gt;\(c\)&lt;/span&gt;, and &lt;span class="math"&gt;\(d\)&lt;/span&gt;; leaving
&lt;span class="math"&gt;\(e\)&lt;/span&gt; and &lt;span class="math"&gt;\(f\)&lt;/span&gt; as zero.&lt;/p&gt;
&lt;p&gt;My preferred method, though, is to apply each transformation after the
other in the &lt;cite&gt;Transform&lt;/cite&gt; dialog (&lt;code class="docutils literal"&gt;Shift + Ctrl + M&lt;/code&gt;). And, this is the
method presented in the cheatsheet at the bottom of this post.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="tl-dr"&gt;
&lt;h2&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;If you are just interested in the transformations needed in Inkscape
you can check the cheatsheet below. It uses third-angle as presented
below.&lt;/p&gt;
&lt;img alt="Views names in third angle representation" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/third_angle.svg" style="width: 400px;"&gt;
&lt;section id="cheatsheet"&gt;
&lt;h3&gt;Cheatsheet&lt;/h3&gt;
&lt;p&gt;Keep in mind that Inkscape treats clockwise rotation as positive. Opposite
to common notation in mathematics.&lt;/p&gt;
&lt;img alt="Cheatsheet for isometric schematics in Inkscape" class="align-center" src="https://nicoguaro.github.io/images/isometric_inkscape/isometric_instructions.svg" style="width: 500px;"&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>computer graphics</category><category>inkscape</category><category>linear algebra</category><category>tutorial</category><guid>https://nicoguaro.github.io/posts/isometric_inkscape/</guid><pubDate>Thu, 24 May 2018 20:42:02 GMT</pubDate></item></channel></rss>