<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nicolás' blog (Publicaciones sobre búsqueda de raíces)</title><link>https://nicoguaro.github.io/</link><description></description><atom:link href="https://nicoguaro.github.io/es/categories/busqueda-de-raices.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2021 &lt;a href="mailto:nicoguarin@gmail.com"&gt;Nicolás Guarín-Zapata&lt;/a&gt; 
&lt;a rel="license" href="http://creativecommons.org/licenses/by/4.0/"&gt;
&lt;img alt="Creative Commons License"
style="border-width:0"
src="https://i.creativecommons.org/l/by/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Wed, 03 Feb 2021 21:27:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Reto de métodos numéricos: Día 5</title><link>https://nicoguaro.github.io/es/posts/numerical-05/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;div&gt;&lt;p&gt;Durante octubre (2017) estaré escribiendo un programa por día para algunos
métodos numéricos famosos en Python y Julia. Esto está pensado como
un ejercicio, no esperen que el código sea lo suficientemente bueno para
usarse en la "vida real". Además, también debo mencionar que casi que no
tengo experiencia con Julia, así que probablemente no escriba un Julia
idiomático y se parezca más a Python.&lt;/p&gt;
&lt;div class="section" id="metodo-de-broyden"&gt;
&lt;h2&gt;Método de Broyden&lt;/h2&gt;
&lt;p&gt;Hoy tenemos el &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Broyden%27s_method"&gt;método de Broyden&lt;/a&gt;.
La idea principal en este método es calcular la matriz jacobiana solo en la
primera iteración y cambiarla para cada iteración realizando actualizaciones
de rango 1.&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\mathbf{x}_k = \mathbf{x}_{k-1} -
    J_n \mathbf{F}(\mathbf{x_k})
\end{equation*}
&lt;/div&gt;
&lt;p&gt;en donde estimamos la matriz jacobiana en el paso &lt;span class="math"&gt;\(n\)&lt;/span&gt; usando&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\mathbf J_n = \mathbf J_{n - 1} + \frac{\Delta \mathbf f_n - \mathbf J_{n - 1} \Delta \mathbf x_n}{\|\Delta \mathbf x_n\|^2} \Delta \mathbf x_n^{\mathrm T}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;que corresponde a actualizaciones de rango 1 de la matriz jacobiana.&lt;/p&gt;
&lt;p&gt;Probaremos el método con la función
&lt;span class="math"&gt;\(\mathbf{F}(x, y) = (x + 2y - 2, x^2 + 4x - 4)\)&lt;/span&gt;
con solución &lt;span class="math"&gt;\(\mathbf{x} = (0, 1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;A continuación se presentan los códigos.&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy.linalg&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;det&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;broyden&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-7"&gt;&lt;/a&gt;    &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;det&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Derivative near to zero."&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-12"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-14"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, x: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f_old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f_old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-19"&gt;&lt;/a&gt;        &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;f_old&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-20"&gt;&lt;/a&gt;        &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-21"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-22"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-23"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-27"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-28"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-29"&gt;&lt;/a&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-31"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-32"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-33"&gt;&lt;/a&gt;            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-34"&gt;&lt;/a&gt;            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_dba2dfedee544902b0462b9bbc063f7c-37"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broyden&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="julia"&gt;
&lt;h3&gt;Julia&lt;/h3&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;broyden&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-3"&gt;&lt;/a&gt;    &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-4"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-5"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;det&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-6"&gt;&lt;/a&gt;            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nothing&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-7"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Derivative near to zero."&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-8"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;, x: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-12"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f_old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;dx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;f_old&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-17"&gt;&lt;/a&gt;        &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;f_old&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-18"&gt;&lt;/a&gt;        &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;'/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-19"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-20"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-21"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-22"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-25"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-27"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-28"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-29"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-33"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-34"&gt;&lt;/a&gt;           &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-35"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-37"&gt;&lt;/a&gt;
&lt;a name="rest_code_86598bb5d27f4159a8c5a9a353477026-38"&gt;&lt;/a&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broyden&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="comparacion-python-julia"&gt;
&lt;h3&gt;Comparación Python/Julia&lt;/h3&gt;
&lt;p&gt;Respecto al número de líneas tenemos: 38 en Python y 39 en Julia. La comparación
en tiempo de ejecución se realizó con el comando mágico de IPython &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt;
y con &lt;code class="docutils literal"&gt;@benchmark&lt;/code&gt; en Julia.&lt;/p&gt;
&lt;p&gt;Para Python:&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_86f80ebd98b94a4a97a379c1d48cd390-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;timeit&lt;/span&gt; broyden(fun, jaco, [1.0, 2.0])
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_a814c3a85a4541b99008335ba5e6929f-1"&gt;&lt;/a&gt;1000 loops, best of 3: 703 µs per loop
&lt;/pre&gt;&lt;p&gt;Para Julia:&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_3ef889a2501545318bd0c3b580d8e456-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@benchmark&lt;/span&gt; &lt;span class="n"&gt;broyden&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;BenchmarkTools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trial&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-2"&gt;&lt;/a&gt;  &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mf"&gt;14.41&lt;/span&gt; &lt;span class="n"&gt;KiB&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-3"&gt;&lt;/a&gt;  &lt;span class="n"&gt;allocs&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;220&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-4"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;12.099&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;12.867&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-7"&gt;&lt;/a&gt;  &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;15.378&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.78&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-8"&gt;&lt;/a&gt;  &lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;3.511&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;97.53&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-9"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-10"&gt;&lt;/a&gt;  &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;a name="rest_code_8f234eb6eda0499d98d31d9c70d58e35-11"&gt;&lt;/a&gt;  &lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;En este caso, podemos decir que el código de Python es alrededor de 50
veces más lento que el de Julia.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="comparacion-newton-broyden"&gt;
&lt;h3&gt;Comparación Newton/Broyden&lt;/h3&gt;
&lt;p&gt;A continuación, comparamos el método de Newton y Broyden. Estamos usando
la función &lt;span class="math"&gt;\(\mathbf{x}^T \mathbf{x} + \mathbf{x}\)&lt;/span&gt; para la prueba.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;Python&lt;/h4&gt;
&lt;p&gt;El código para la función y el jacobiano es&lt;/p&gt;
&lt;pre class="code Python"&gt;&lt;a name="rest_code_12bcef93b9404563a963359a971c614d-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;diag&lt;/span&gt;
&lt;a name="rest_code_12bcef93b9404563a963359a971c614d-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;a name="rest_code_12bcef93b9404563a963359a971c614d-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;jaco&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;y los resultados son:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 15%"&gt;
&lt;col style="width: 44%"&gt;
&lt;col style="width: 41%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;n&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Newton (μs)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Broyden (μs)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;500&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;664&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;541&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;717&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;3450&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;4800&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;Julia&lt;/h4&gt;
&lt;p&gt;El código para la función y el jacobiano es&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_6bb151fdea7744519f016a2d43083f68-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;a name="rest_code_6bb151fdea7744519f016a2d43083f68-2"&gt;&lt;/a&gt;&lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diagm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;y los resultados son:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 15%"&gt;
&lt;col style="width: 44%"&gt;
&lt;col style="width: 41%"&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;n&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Newton (μs)&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Broyden (μs)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;2&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1.76&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1.65&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;10&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;56.42&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;5.12&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;100&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;1782&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;367&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;En este caso, estamos comparando el valor medio de los resultados de
&lt;code class="docutils literal"&gt;@benchmark&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>búsqueda de raíces</category><category>computación científica</category><category>julia</category><category>métodos numéricos</category><category>python</category><guid>https://nicoguaro.github.io/es/posts/numerical-05/</guid><pubDate>Thu, 05 Oct 2017 18:21:41 GMT</pubDate></item><item><title>Reto de métodos numéricos: Día 4</title><link>https://nicoguaro.github.io/es/posts/numerical-04/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;div&gt;&lt;p&gt;Durante octubre (2017) estaré escribiendo un programa por día para algunos
métodos numéricos famosos en Python y Julia. Esto está pensado como
un ejercicio, no esperen que el código sea lo suficientemente bueno para
usarse en la "vida real". Además, también debo mencionar que casi que no
tengo experiencia con Julia, así que probablemente no escriba un Julia
idiomático y se parezca más a Python.&lt;/p&gt;
&lt;div class="section" id="metodo-de-newton-caso-vectorial"&gt;
&lt;h2&gt;Método de Newton: caso vectorial&lt;/h2&gt;
&lt;p&gt;Hoy tenemos al &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Newton%27s_method#Nonlinear_systems_of_equations"&gt;método de Newton&lt;/a&gt;
una vez más. En este caso, la función es vectorial. Esto implica una ligera
modificación a la publicación original. La nueva aproximación se calcula a
partir de la anterior usando&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\mathbf{x}_k = \mathbf{x}_{k-1} -
    J(\mathbf{x}_k)^{-1} \mathbf{F}(\mathbf{x_k})
\end{equation*}
&lt;/div&gt;
&lt;p&gt;en donde necesitamos usa la matriz jacobiana &lt;span class="math"&gt;\(J\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Probaremos el método con la función
&lt;span class="math"&gt;\(\mathbf{F}(x, y) = (x + 2y - 2, x^2 + 4x - 4)\)&lt;/span&gt;
con solución &lt;span class="math"&gt;\(\mathbf{x} = (0, 1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;A continuación se encuentran los códigos.&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy.linalg&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;det&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-6"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-7"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-8"&gt;&lt;/a&gt;        &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;det&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Derivative near to zero."&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-13"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-15"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, x: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-17"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-18"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-19"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-23"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-27"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-28"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-29"&gt;&lt;/a&gt;            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-30"&gt;&lt;/a&gt;            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_847997c08f114f05bf4e806d85aea716-33"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="julia"&gt;
&lt;h3&gt;Julia&lt;/h3&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;J&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-5"&gt;&lt;/a&gt;        &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;det&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-7"&gt;&lt;/a&gt;            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nothing&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Derivative near to zero."&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-9"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;, x: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-14"&gt;&lt;/a&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;\&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-15"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;norm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-17"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-19"&gt;&lt;/a&gt;    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-21"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-24"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-25"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-26"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-29"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-30"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-31"&gt;&lt;/a&gt;            &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-32"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_56c375a235ba40f182a27e8e2c3d1591-35"&gt;&lt;/a&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="comparacion"&gt;
&lt;h3&gt;Comparación&lt;/h3&gt;
&lt;p&gt;Respecto al número de líneas tenemos: 31 en Python y 33 en Julia. La comparación
en tiempo de ejecución se realizó con el comando mágico de IPython &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt;
y con &lt;code class="docutils literal"&gt;@benchmark&lt;/code&gt; en Julia.&lt;/p&gt;
&lt;p&gt;Para Python:&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_670d64f1f6c441c4992ec078b2e1ca06-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;timeit&lt;/span&gt; newton(fun, jaco, [1.0, 10.0])
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_09e334e3935a4468a1d587ec1a19838a-1"&gt;&lt;/a&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;284&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Para Julia:&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_4b2ba7a2886d478f9b8323050c570210-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@benchmark&lt;/span&gt; &lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;BenchmarkTools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trial&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-2"&gt;&lt;/a&gt;  &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mf"&gt;10.44&lt;/span&gt; &lt;span class="n"&gt;KiB&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-3"&gt;&lt;/a&gt;  &lt;span class="n"&gt;allocs&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;192&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-4"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;6.818&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;7.167&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-7"&gt;&lt;/a&gt;  &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;9.607&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;16.53&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-8"&gt;&lt;/a&gt;  &lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;2.953&lt;/span&gt; &lt;span class="n"&gt;ms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;97.40&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-9"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-10"&gt;&lt;/a&gt;  &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;a name="rest_code_f970a692cbf84a4cbd54572e8793db0f-11"&gt;&lt;/a&gt;  &lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;En este caso, podemos decir que el código de Python es alrededor de 40 veces más
lento que el de Julia. Esta es una mejora respecto a los ejemplos anteriore,
en donde la razón era alrededor de 100. La razón para esta "mejora" puede ser
en la iversión del jacobiano, que llama a una rutina de &lt;code class="docutils literal"&gt;numpy&lt;/code&gt;, que hace
el trabajo sucio por nosotros.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>búsqueda de raíces</category><category>computación científica</category><category>julia</category><category>métodos numéricos</category><category>python</category><guid>https://nicoguaro.github.io/es/posts/numerical-04/</guid><pubDate>Thu, 05 Oct 2017 02:30:15 GMT</pubDate></item><item><title>Reto de métodos numéricos: Día 3</title><link>https://nicoguaro.github.io/es/posts/numerical-03/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;div&gt;&lt;p&gt;Durante octubre (2017) estaré escribiendo un programa por día para algunos
métodos numéricos famosos en Python y Julia. Esto está pensado como
un ejercicio, no esperen que el código sea lo suficientemente bueno para
usarse en la "vida real". Además, también debo mencionar que casi que no
tengo experiencia con Julia, así que probablemente no escriba un Julia
idiomático y se parezca más a Python.&lt;/p&gt;
&lt;div class="section" id="metodo-de-newton"&gt;
&lt;h2&gt;Método de Newton&lt;/h2&gt;
&lt;p&gt;El método de hoy es el &lt;a class="reference external" href="https://es.wikipedia.org/wiki/M%C3%A9todo_de_Newton"&gt;método de Newton&lt;/a&gt;. Este método
se usa para resolver la ecuación &lt;span class="math"&gt;\(f(x) = 0\)&lt;/span&gt; para &lt;span class="math"&gt;\(x\)&lt;/span&gt; real, y
&lt;span class="math"&gt;\(f\)&lt;/span&gt; una función diferenciable. Inicia con un estimado inicial
&lt;span class="math"&gt;\(x_0\)&lt;/span&gt; y sucesivamente lo refina encoentrando el intercepto de la línea
tangente de la función con cero. La nueva aproximación se calcula a partir
de la anterior con&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
x_k = x_{k-1} - \frac{f(x)}{f'(x)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;La convergencia de este método es generalmente más rápida que en el método
de bisección. Sin embargo, la convergencia no está garantizada. Otra
desventaje del método es que se necesita la derivada de la función.&lt;/p&gt;
&lt;p&gt;Usaremos la función &lt;span class="math"&gt;\(f(x) = \cos(x) - x\)&lt;/span&gt; para probar los códigos,
y el estimado inicial es 1.0.&lt;/p&gt;
&lt;p&gt;A continuación se presentan los códigos.&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-6"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-9"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Derivative near to zero."&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-10"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-12"&gt;&lt;/a&gt;            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, x: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-13"&gt;&lt;/a&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-14"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-15"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-16"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-20"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-24"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-25"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_479e40c0e75242a1b6d77cc9dad08853-28"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="julia"&gt;
&lt;h3&gt;Julia&lt;/h3&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-2"&gt;&lt;/a&gt;    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-3"&gt;&lt;/a&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-4"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-5"&gt;&lt;/a&gt;            &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nothing&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-6"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Derivative near to zero."&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-7"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-8"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;, x: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-11"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-12"&gt;&lt;/a&gt;        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-13"&gt;&lt;/a&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-14"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-15"&gt;&lt;/a&gt;            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-16"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-18"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-19"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-22"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-24"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-27"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-28"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-29"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-30"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_aa21e9402109453ab43791e023ded0f0-32"&gt;&lt;/a&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="comparacion"&gt;
&lt;h3&gt;Comparación&lt;/h3&gt;
&lt;p&gt;Respecto al número de líneas tenemos: 28 en Python y 32 en Julia. La comparación
en tiempo de ejecución se realizó con el comando mágico de IPython &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt;
y con &lt;code class="docutils literal"&gt;@benchmark&lt;/code&gt; en Julia.&lt;/p&gt;
&lt;p&gt;Para Python:&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_594cd936a61d40858a9a9dbaa33b2282-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;timeit&lt;/span&gt; newton(fun, grad, 1.0)
&lt;/pre&gt;&lt;p&gt;com resultado&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_e4baf484c8054912beecf296eaa6afd1-1"&gt;&lt;/a&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;27.3&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Para Julia:&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_0ca9b2e5e4db4e699745320ea70c46be-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@benchmark&lt;/span&gt; &lt;span class="n"&gt;newton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grad&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;BenchmarkTools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trial&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-2"&gt;&lt;/a&gt;  &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-3"&gt;&lt;/a&gt;  &lt;span class="n"&gt;allocs&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-4"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;327.925&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;337.956&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-7"&gt;&lt;/a&gt;  &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;351.064&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-8"&gt;&lt;/a&gt;  &lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;8.118&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;92.60&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-9"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-10"&gt;&lt;/a&gt;  &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;a name="rest_code_634b75d6f337415da573bf5de4ba22b6-11"&gt;&lt;/a&gt;  &lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mi"&gt;226&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>búsqueda de raíces</category><category>computación científica</category><category>julia</category><category>métodos numéricos</category><category>python</category><guid>https://nicoguaro.github.io/es/posts/numerical-03/</guid><pubDate>Wed, 04 Oct 2017 00:26:13 GMT</pubDate></item><item><title>Reto de métodos numéricos: Día 2</title><link>https://nicoguaro.github.io/es/posts/numerical-02/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;div&gt;&lt;p&gt;Durante octubre (2017) estaré escribiendo un programa por día para algunos
métodos numéricos famosos en Python y Julia. Esto está pensado como
un ejercicio, no esperen que el código sea lo suficientemente bueno para
usarse en la "vida real". Además, también debo mencionar que casi que no
tengo experiencia con Julia, así que probablemente no escriba un Julia
idiomático y se parezca más a Python.&lt;/p&gt;
&lt;div class="section" id="regula-falsi"&gt;
&lt;h2&gt;Regula falsi&lt;/h2&gt;
&lt;p&gt;El segundo método a considerar es el &lt;a class="reference external" href="https://en.wikipedia.org/wiki/False_position_method"&gt;método de posición falsa&lt;/a&gt;,
o &lt;em&gt;regula falsi&lt;/em&gt;. Este método se utiliza para resolver la ecuación
&lt;span class="math"&gt;\(f(x) = 0\)&lt;/span&gt; para &lt;span class="math"&gt;\(x\)&lt;/span&gt; real, y &lt;span class="math"&gt;\(f\)&lt;/span&gt; continua. Se comienza con
un intervalo &lt;span class="math"&gt;\([a, b]\)&lt;/span&gt;, donde &lt;span class="math"&gt;\(f (a)\)&lt;/span&gt; y  &lt;span class="math"&gt;\(f (b)\)&lt;/span&gt; deben
tener signos opuestos. El método es similar al método de bisección pero en
lugar de dividir a la mitad el original intervalo toma como nuevo punto del
intervalo la intersección de la línea
que conecta la función evaluada en los dos puntos extremos. Entonces, el nuevo
el punto se calcula a partir de&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
c = \frac{a f(b) - b f(a)}{f(b) - f(a)}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Como en el método de bisección, mantenemos el intervalo donde la solución
aparece, es decir, donde cambia el signo de la función.&lt;/p&gt;
&lt;p&gt;Usaremos la función &lt;span class="math"&gt;\(f(x) = \cos(x) - x\)&lt;/span&gt; para probar los códigos,
y como intervalo inicial &lt;span class="math"&gt;\([0.5, \pi/4]\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;A continuación se presentan los códigos.&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;regula_falsi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-6"&gt;&lt;/a&gt;        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"The function should have a sign change in the interval."&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-9"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;qa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-12"&gt;&lt;/a&gt;            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-13"&gt;&lt;/a&gt;            &lt;span class="n"&gt;qc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-15"&gt;&lt;/a&gt;                &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, c: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-16"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-17"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-18"&gt;&lt;/a&gt;                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-19"&gt;&lt;/a&gt;                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-20"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;qa&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;qc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-21"&gt;&lt;/a&gt;                &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-22"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;qc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-23"&gt;&lt;/a&gt;                &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-26"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-27"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_6e451b0d309044d38ad930372e5680b7-29"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regula_falsi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="julia"&gt;
&lt;h3&gt;Julia&lt;/h3&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;regula_falsi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;niter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-3"&gt;&lt;/a&gt;        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nothing&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"The function should have a sign change in the interval."&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-6"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;niter&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-7"&gt;&lt;/a&gt;            &lt;span class="n"&gt;qa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-9"&gt;&lt;/a&gt;            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;qa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-10"&gt;&lt;/a&gt;            &lt;span class="n"&gt;qc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-11"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;verbose&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-12"&gt;&lt;/a&gt;                &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"n: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cont&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;, c: &lt;/span&gt;&lt;span class="si"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-13"&gt;&lt;/a&gt;            &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-15"&gt;&lt;/a&gt;                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-16"&gt;&lt;/a&gt;                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-17"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;qa&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;qc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-18"&gt;&lt;/a&gt;                &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-19"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;qb&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;qc&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-20"&gt;&lt;/a&gt;                &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-21"&gt;&lt;/a&gt;            &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-22"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-23"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-25"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-26"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-27"&gt;&lt;/a&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-28"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-29"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-30"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_e61c74c149494f2eb352db976862c74a-32"&gt;&lt;/a&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;regula_falsi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="comparacion"&gt;
&lt;h3&gt;Comparación&lt;/h3&gt;
&lt;p&gt;Respecto al número de líneas de código tenemos: 29 en Python y 32 en Julia.
La comparación en tiempo de ejecución se realiza con el comando mágico
de IPython &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt; y con &lt;code class="docutils literal"&gt;@benchmark&lt;/code&gt; en Julia.&lt;/p&gt;
&lt;p&gt;Para Python:&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_f7e665a97f884831aca654c16313928a-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;timeit&lt;/span&gt; regula_falsi(fun, 0.5, 0.25*pi)
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_b8b9434aeda2411c94e16c3ea34a7478-1"&gt;&lt;/a&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;35.1&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Para Julia:&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_2e78d1625660405f93890d86a228bed2-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@benchmark&lt;/span&gt; &lt;span class="n"&gt;regula_falsi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;BenchmarkTools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trial&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-2"&gt;&lt;/a&gt;  &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-3"&gt;&lt;/a&gt;  &lt;span class="n"&gt;allocs&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-4"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;449.495&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;464.371&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-7"&gt;&lt;/a&gt;  &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;493.785&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.52&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-8"&gt;&lt;/a&gt;  &lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;9.723&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;92.54&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-9"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-10"&gt;&lt;/a&gt;  &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;a name="rest_code_97c6ad1bd1fa46ba9db3d69642157b69-11"&gt;&lt;/a&gt;  &lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mi"&gt;198&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>búsqueda de raíces</category><category>computación científica</category><category>julia</category><category>métodos numéricos</category><category>python</category><guid>https://nicoguaro.github.io/es/posts/numerical-02/</guid><pubDate>Tue, 03 Oct 2017 01:47:05 GMT</pubDate></item><item><title>Reto de métodos numéricos</title><link>https://nicoguaro.github.io/es/posts/numerical-01/</link><dc:creator>Nicolás Guarín-Zapata</dc:creator><description>&lt;div&gt;&lt;p&gt;Por el próximo mes estaré escribiendo un programa por día para algunos métodos
numéricos conocidos en Python y Julia. Está destinado a ser un ejercicio,
entonces no espere que el código sea lo suficientemente bueno para un uso real.
Además, debo mencionar que casi no tengo experiencia con Julia, por lo que
probablemente no será Julia idiomático sino Julia más parecido a Python.&lt;/p&gt;
&lt;div class="section" id="dia-1-metodo-de-biseccion"&gt;
&lt;h2&gt;Día 1: Método de bisección&lt;/h2&gt;
&lt;p&gt;El primer método a considerar es el
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bisection_method"&gt;método de bisección&lt;/a&gt;.
Este método se usa para resolver la ecuación &lt;span class="math"&gt;\(f(x) = 0\)&lt;/span&gt; para
&lt;span class="math"&gt;\(x\)&lt;/span&gt; real, y &lt;span class="math"&gt;\(f\)&lt;/span&gt; continua. Se empieza con un intervalo &lt;span class="math"&gt;\([a,b]\)&lt;/span&gt;,
donde &lt;span class="math"&gt;\(f(a)\)&lt;/span&gt; y &lt;span class="math"&gt;\(f(b)\)&lt;/span&gt; deben tener signos opuestos. El método procede
partiendo a la mitad el intervalo y seleccionando el subintervalo en donde
aparece la solución, es decir, el signo de la función cambia.&lt;/p&gt;
&lt;p&gt;Usaremos la función &lt;span class="math"&gt;\(f(x) = \cos(x) - x^2\)&lt;/span&gt; para probar los códigos,
y el intervalo inicial es [0, 1].&lt;/p&gt;
&lt;p&gt;A continuación están los códigos:&lt;/p&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;Python&lt;/h3&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;division&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bisection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xtol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-6"&gt;&lt;/a&gt;        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-7"&gt;&lt;/a&gt;        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"The function should have a sign change in the interval."&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-8"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;nmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xtol&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-10"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nmax&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-11"&gt;&lt;/a&gt;            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-12"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-13"&gt;&lt;/a&gt;                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-14"&gt;&lt;/a&gt;                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-15"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-16"&gt;&lt;/a&gt;                &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-17"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-18"&gt;&lt;/a&gt;                &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-19"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-22"&gt;&lt;/a&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_ea01650129444aefb77cc3dac57fcd40-25"&gt;&lt;/a&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bisection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Con resultado&lt;/p&gt;
&lt;pre class="code python"&gt;&lt;a name="rest_code_ea74bce8b7a544d796455953414ce1b3-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.824131965637207&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Maximum number of iterations reached.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="julia"&gt;
&lt;h3&gt;Julia&lt;/h3&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;bisection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xtol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1e-12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-2"&gt;&lt;/a&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-3"&gt;&lt;/a&gt;        &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;nothing&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"The function should have a sign change in the interval."&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-5"&gt;&lt;/a&gt;    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-6"&gt;&lt;/a&gt;        &lt;span class="n"&gt;nmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log2&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xtol&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-7"&gt;&lt;/a&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cont&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nmax&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-8"&gt;&lt;/a&gt;            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-9"&gt;&lt;/a&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;ftol&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-10"&gt;&lt;/a&gt;                &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Root found with desired accuracy."&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-11"&gt;&lt;/a&gt;                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-12"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-13"&gt;&lt;/a&gt;                &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-14"&gt;&lt;/a&gt;            &lt;span class="k"&gt;elseif&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-15"&gt;&lt;/a&gt;                &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-16"&gt;&lt;/a&gt;            &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-17"&gt;&lt;/a&gt;            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Maximum number of iterations reached."&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-18"&gt;&lt;/a&gt;        &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-19"&gt;&lt;/a&gt;    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-20"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-21"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-23"&gt;&lt;/a&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-24"&gt;&lt;/a&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-25"&gt;&lt;/a&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_4be21cd839a946649bffb680ca545eaf-27"&gt;&lt;/a&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bisection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Con resultado&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_f650be095ef2468ba5e4f77d846f3ef0-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.824131965637207&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Maximum number of iterations reached."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;En este caso, ambos códigos están bastante cerca. El código de Python tiene
25 líneas, mientras que el de Julia 27. Como se esperaba, los resultados
son iguales.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="edicion-2017-10-02"&gt;
&lt;h3&gt;Edición (2017-10-02)&lt;/h3&gt;
&lt;p&gt;Como sugirió Edward Villegas, decidí comparar los tiempos de ejecución.
Usé  &lt;code class="docutils literal"&gt;%timeit&lt;/code&gt; para IPython y &lt;code class="docutils literal"&gt;@benchmark&lt;/code&gt; (de &lt;code class="docutils literal"&gt;BenchmarkTools&lt;/code&gt;)
para Julia.&lt;/p&gt;
&lt;p&gt;En IPython, tenemos&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_02f034e83d054e6385fc8cc108603326-1"&gt;&lt;/a&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;timeit&lt;/span&gt; bisection(fun, 0.0, 2.0)
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code IPython"&gt;&lt;a name="rest_code_c3eb9ffd579f4946855b838a15953e15-1"&gt;&lt;/a&gt;&lt;span class="mi"&gt;10000&lt;/span&gt; &lt;span class="n"&gt;loops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;107&lt;/span&gt; &lt;span class="n"&gt;µs&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Y en Julia, tenemos&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_553dedea5dc34468a591e7c2c797501a-1"&gt;&lt;/a&gt;&lt;span class="nd"&gt;@benchmark&lt;/span&gt; &lt;span class="n"&gt;bisection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;con resultado&lt;/p&gt;
&lt;pre class="code julia"&gt;&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;BenchmarkTools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Trial&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-2"&gt;&lt;/a&gt;  &lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-3"&gt;&lt;/a&gt;  &lt;span class="n"&gt;allocs&lt;/span&gt; &lt;span class="n"&gt;estimate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-4"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;minimum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;1.505&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-6"&gt;&lt;/a&gt;  &lt;span class="n"&gt;median&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="mf"&gt;1.548&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-7"&gt;&lt;/a&gt;  &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="mf"&gt;1.604&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-8"&gt;&lt;/a&gt;  &lt;span class="n"&gt;maximum&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mf"&gt;38.425&lt;/span&gt; &lt;span class="n"&gt;μs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.00&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;GC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-9"&gt;&lt;/a&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-10"&gt;&lt;/a&gt;  &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;          &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;a name="rest_code_a461003b74d54aa9ae8c6b4c142f7c7e-11"&gt;&lt;/a&gt;  &lt;span class="n"&gt;evals&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Parece que la versión de Julia es alrededor de 100 veces más rápida que
su equivalente en Python.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>búsqueda de raíces</category><category>computación científica</category><category>julia</category><category>métodos numéricos</category><category>python</category><guid>https://nicoguaro.github.io/es/posts/numerical-01/</guid><pubDate>Mon, 02 Oct 2017 04:12:04 GMT</pubDate></item></channel></rss>